---
title: "Trabalho"
subtitle: "Dados de Queimadas"
lang: pt-BR
author: "Mikael Marin Coletto"
date: "2024-10-01"
format:
  html:
    toc: true
    code-fold: true
    theme: cerulean
    transition: slide
    background-transition: fade
    embed-resources: true
    # anchor-sections: true 
    smooth-scroll: true
    center: true
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
options(scipen = 99999)
data_from <- "pendrive"
# data_from <- "pendrive"
if(data_from == "local"){
  data_path <- "/mnt/Netac-Dados/Projetos/R/Pos-Estat/3-Semestre/Series-temporais/Trabalho/dados/"
}
if(data_from == "pendrive"){
  data_path <- "/media/userlm/Ventoy/Projetos/R/Pos-Estat/3-semestre/Series-temporais/Trabalho/dados/"
}
rewrite_data <- F
```

# Introdução

Neste trabalho, vamos analisar os dados de queimadas no Brasil. Os dados foram obtidos do portal BDQueimadas do INPE (Instituto Nacional de Pesquisas Espaciais) e estão disponíveis em [https://terrabrasilis.dpi.inpe.br/queimadas/bdqueimadas/#exportar-dados](https://terrabrasilis.dpi.inpe.br/queimadas/bdqueimadas/#exportar-dados).       

O intuito é analisar a quantidade de focos de queimadas por mês e ano, tentando identificar se houve um aumento no número de queimadas ao longo dos últimos anos.

# Carregando os dados

```{r, dados}
dados_2023_2024 <- data.table::fread(paste0(data_path, "focos_qmd_inpe_2023-10-01_2024-10-01_32.767240.csv"))

df_queimadas_2023_2024 <- dados_2023_2024 |> 
  dplyr::arrange(Estado, Municipio, DataHora)

## Verificando quantas informações temos cada município
df_queimadas_2023_2024_ag_mun_sat <- df_queimadas_2023_2024 |> 
  dplyr::group_by(Municipio, Satelite) |> 
  dplyr::mutate(n = n()) |> 
  dplyr::distinct(Municipio, Satelite, .keep_all = T) |>
  dplyr::select(Estado, Municipio, Satelite, n) |> 
  dplyr::ungroup()

df_top_22 <- df_queimadas_2023_2024_ag_mun_sat |> 
  # head(22)
  dplyr::slice(1:22)

dados_2014_2015 <- data.table::fread(paste0(data_path, "focos_qmd_inpe_2014-10-01_2015-10-01_41.322529.csv"))

df_queimadas_2014_2015 <- dados_2014_2015 |> 
  dplyr::arrange(Estado, Municipio, DataHora)

## Verificando quantas informações temos cada município
df_queimadas_2014_2015_ag_mun_sat <- df_queimadas_2014_2015 |> 
  dplyr::group_by(Municipio, Satelite) |> 
  dplyr::mutate(n = n()) |> 
  dplyr::distinct(Municipio, Satelite, .keep_all = T) |>
  dplyr::select(Estado, Municipio, Satelite, n)

## Observando um município
df_mun <- df_queimadas_2014_2015_ag_mun_sat |> 
  dplyr::filter(Municipio == "SÃO FÉLIX DO XINGU",
                Satelite == "NPP-375")

```

## Análise inicial

### Verificando a quantidade de focos de queimadas por mês e ano de 2014/10 à 2015/9
```{r, analise-inicial}
## Verificando a quantidade de focos de queimadas por mês e ano
format(lubridate::ymd_hms(df_queimadas_2014_2015[1,1]), "%Y-%m")

df_queimadas_2014_2015_sample <- df_queimadas_2014_2015 |> 
  dplyr::sample_n(1000) |> 
  dplyr::mutate(DataHora_ = lubridate::ymd_hms(DataHora)) |>
  dplyr::mutate(Ano_mes = format(DataHora_, "%Y-%m")) |>
  dplyr::group_by(Ano_mes) |> 
  dplyr::summarise(n = n()) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(Ano_mes = as.factor(Ano_mes))

queimadas_ano_mes <- df_queimadas_2014_2015|> 
  dplyr::sample_n(1000) |> 
  dplyr::mutate(DataHora_ = lubridate::ymd_hms(DataHora)) |>
  dplyr::mutate(Ano_mes = format(DataHora_, "%Y-%m")) |>
  dplyr::filter(Ano_mes != "2015-10") |> 
  dplyr::group_by(Ano_mes) |> 
  dplyr::summarise(n = n()) |> 
  dplyr::ungroup()

queimadas_ano_mes |> 
  ggplot(aes(x = Ano_mes, y = n)) +
  geom_col(position = "dodge", fill = "#407D97") +
  labs(title = "Focos de queimadas por mês e ano",
       x = "Ano/Mês",
       y = "Quantidade de focos") +
  theme_minimal()
```
### Verificando estado com mais focos de incêncio em 2014/10 à 2015/9

```{r, estado-mais-focos-2014-2014}
df_estado <- df_queimadas_2014_2015 |> 
  dplyr::group_by(Estado) |> 
  dplyr::summarise(n = n()) |> 
  dplyr::arrange(desc(n))

df_estado |>
  ggplot(aes(x = n, y = reorder(Estado, n))) +
  geom_col(fill = "#407D97") +
  labs(title = "Focos de queimadas por estado",
       x = "Estado",
       y = "Quantidade de focos") +
  theme_minimal()
```

### Verificando estado com mais focos de incêncio em 2023/10 à 2024/9

```{r, estado-mais-focos-2023-2024}
df_estado_2023_2024 <- df_queimadas_2023_2024 |> 
  dplyr::group_by(Estado) |> 
  dplyr::summarise(n = n()) |> 
  dplyr::arrange(desc(n))

df_estado_2023_2024 |>
  ggplot(aes(x = n, y = reorder(Estado, n))) +
  geom_col(fill = "#407D97") +
  labs(title = "Focos de queimadas por estado",
       x = "Estado",
       y = "Quantidade de focos") +
  theme_minimal()
```

## Preparando dados

Para esta avaliação, usaremos os dados apenas de um estado, pelos dados analisados anteriormente, os estados com maior número de focos de incêndio são o Pará e Mato Grosso, pelos dados coletados.
Portanto, faremos uma primeira análise com dados apenas do Pará.

```{r, preparando-dados}
if(rewrite_data){
  # Usando dados apenas de um município
  ## Município selecionado
  estado_sel <- "MATO GROSSO"
  satelite_sel <- "NPP- 375"
  ## Lendo todos os arquivos da pasta dados
  files <- list.files(paste0(data_path), full.names = T)
  ## Lendo os arquivos e selecionando apenas dados do estado e Satelite selecionados
  df_queimadas_estado <- lapply(files, function(x){
    dados <- data.table::fread(x)
    dados |> 
      dplyr::filter(Estado == estado_sel,
                    Satelite == satelite_sel)
  })
  ## Unindo todos os dados
  df_queimadas_estado <- dplyr::bind_rows(df_queimadas_estado)
  ## Removendo linhas duplicadas
  df_queimadas_estado <- df_queimadas_estado |> 
    dplyr::distinct()
  
## Verificando a quantidade de focos de queimadas por mês e ano
df_queimadas_estado_anomes <- df_queimadas_estado |> 
  dplyr::mutate(DataHora_ = lubridate::ymd_hms(DataHora)) |>
  dplyr::mutate(Ano_mes = format(DataHora_, "%Y-%m")) |>
  dplyr::group_by(Ano_mes) |> 
  dplyr::summarise(n = n()) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(Ano_mes = Ano_mes)
  
  ## Salvando os dados
  saveRDS(df_queimadas_estado_anomes, paste0(data_path, "df_queimadas_ma_anomes.rds"))
}else{
  df_queimadas_estado_anomes <- readRDS(paste0(data_path, "df_queimadas_ma_anomes.rds"))
  estado_sel <- "MATO GROSSO"
  satelite_sel <- "NPP-375"
}
```

# Série temporal

## Visualizando a série

```{r, visualizacoes}
## Fazendo gráfico de linhas da série temporal
df_queimadas_estado_anomes |>
  mutate(Ano_mes = paste0(Ano_mes, "-01")) %>%       # Create "YYYY-MM-01"
  mutate(Ano_mes = lubridate::ymd(Ano_mes))   |> 
  ggplot(aes(x = Ano_mes, y = n, group = 1)) +
  geom_line() +
  labs(title = paste0 ("Focos de queimadas por mês e ano ", "no ", estado_sel),
       x = "Ano/Mês",
       y = "Quantidade de focos") +
  theme_minimal() +
  scale_x_date(date_labels = "%Y", date_breaks = "1 year")

```

## Correlogramas

```{r, autocorrelacao}
## Autocorrelação dos dados de focos de queimadas no estado selecionado
forecast::Acf(df_queimadas_estado_anomes$n, type = "correlation", main = "Autocorrelação para volume de queimadas no mês", lag.max = 15)

## Autocorrelação parcial dos dados de focos de queimadas no estado selecionado
forecast::Acf(df_queimadas_estado_anomes$n, type = "partial", main = "Autocorrelação parcial para volume de queimadas no mês", lag.max = 15)
```
## Modelo ARIMA

```{r, modelo-arima}
## Dividindo os dados em treino e teste
df_queimadas_estado_anomes <- df_queimadas_estado_anomes |> 
  dplyr::mutate(Ano_mes = as.Date(paste0(Ano_mes, "-01")))

df_queimadas_estado_anomes_treino <- df_queimadas_estado_anomes |>
  dplyr::filter(Ano_mes < "2024-01-01" & Ano_mes > "2015-01-01")

df_queimadas_estado_anomes_teste <- df_queimadas_estado_anomes |>
  dplyr::filter(Ano_mes >= "2024-01-01")

## Transformando os dados em série temporal
ts_data <- ts(df_queimadas_estado_anomes_treino$n, start = c(lubridate::year(min(df_queimadas_estado_anomes_treino$Ano_mes)), lubridate::month(min(df_queimadas_estado_anomes_treino$Ano_mes))), frequency = 12)

# auto.arima(ts_data, seasonal = TRUE)
# ts_data <- na.omit(ts_data)
fit_arima <- forecast::Arima(ts_data, order = c(1, 0, 0))
fit_arima
## Coeficientes do modelo
lmtest::coeftest(fit_arima)


fit_sarima <-forecast::Arima(ts_data, order = c(1, 0, 0), seasonal = list(order = c(2, 1, 0), period = 12))
fit_sarima
## Coeficientes do modelo
lmtest::coeftest(fit_sarima)

# (1-pnorm(abs(fit_sarima$coef)/sqrt(diag(fit_sarima$var.coef))))*2

## Modelo ARIMA
# modelo_arima <- forecast::Arima(ts_data, order = c(1, 0, 1), seasonal = list(order = c(2, 1, 0), period = 12))
# forecast::Arima(ts_data, order = c(1, 0, 1), seasonal = c(12, 0, 1))
```

```{r, analisando resíduos}
#| warning: false

## Analisando modelo
fitted_values <- fitted(fit_sarima)

dates <- df_queimadas_estado_anomes_treino$Ano_mes
# 1:length(ts_data)

ggplot() +
  geom_line(aes(x = dates, y = ts_data, color = "Dados originais"), lwd = 1) +
  geom_line(aes(x = dates, y = fitted_values, color = "SARIMA(1,0,0)(2,1,0)[12]"), lwd = 0.5) +
  labs(title = "Dados originais e modelo ajustado",
       subtitle = "Número de focos de incêndio",
       x = "",
       y = "",
       color = "Legend") +
  scale_color_manual(values = c("Dados originais" = "black", "SARIMA(1,0,0)(2,1,0)[12]" = "red")) +
  theme_minimal()

```

### Analisando resíduos

```{r, analisando-residuos}
residuals <- residuals(fit_sarima)
# 
ggplot() +
  geom_line(aes(x = time(residuals), y = residuals)) +
  labs(title = "Resíduos no tempo", x = "Time", y = "Resíduos") +
  theme_minimal()

forecast::Acf(residuals, type = "correlation", main = "AC of Residuals")
forecast::Acf(residuals, type = "partial", main = "ACF of Residuals")

### Resíduos padronizados
# residuals_standardized <- residuals / sd(residuals)
# ggplot() +
#   geom_line(aes(x = time(residuals_standardized), y = residuals_standardized)) +
#   labs(title = "Standardized Residuals vs. Time", x = "Time", y = "Standardized Residuals") +
#   theme_minimal()
```

## Modelo ARFIMA

```{r, modelo-arfima}
library(arfima)
## Modelo ARFIMA
# fit_arfima <- fracdiff::fracdiff(ts_data, nar = 1, nma = 1, ar = 2)
fit_arfima <- arfima::arfima(ts_data, order = c(1, 0, 0), seasonal = list(order = c(2, 0, 1), period = 12))
fit_arfima_2 <- arfima::arfima(ts_data, order = c(1, 0, 0), seasonal = list(order = c(2, 0, 1), period = 12))
arfima::bestModes(fit_arfima, 5)

## Coeficientes do modelo
lmtest::coeftest(fit_arfima)

## Analisando modelo
fitted_values_arfima <- fitted(fit_arfima)

ggplot() +
  geom_line(aes(x = dates, y = ts_data, color = "Dados originais"), lwd = 1) +
  geom_line(aes(x = dates, y = fitted_values_arfima, color = "ARFIMA(1,1)"), lwd = 1) +
  labs(title = "Dados originais e modelo ajustado",
       subtitle = "Número de focos de incêndio",
       x = "",
       y = "",
       color = "Legend") +
  scale_color_manual(values = c("Dados originais" = "black", "ARFIMA(1,1)" = "red")) +
  theme_minimal()

```

## Modelo ARMAX

```{r, modelo-armax}
## Modelo ARMAX
# fit_armax <- forecast::Arima(ts_data, order = c(1, 0, 1), seasonal = c(12, 0, 1), xreg = )

## Coeficientes do modelo
lmtest::coeftest(fit_armax)

## Analisando modelo
fitted_values_armax <- fitted(fit_armax)

ggplot() +
  geom_line(aes(x = dates, y = ts_data, color = "Dados originais"), lwd = 1) +
  geom_line(aes(x = dates, y = fitted_values_armax, color = "ARMAX(1,0,1)(12,0,1)"), lwd = 1) +
  labs(title = "Dados originais e modelo ajustado",
       subtitle = "Número de focos de incêndio",
       x = "",
       y = "",
       color = "Legend") +
  scale_color_manual(values = c("Dados originais" = "black", "ARMAX(1,0,1)(12,0,1)" = "red")) +
  theme_minimal()
```

## Teste de raiz unitária

```{r, teste-raiz-unitaria}
## Teste de Dickey-Fuller aumentado
aug_dic_ful_test <- tseries::adf.test(ts_data, alternative = "stationary")
print(aug_dic_ful_test)
## Teste Kwiatkowski-Phillips-Schmidt-Shin
kpss_test <- tseries::kpss.test(ts_data)
print(kpss_test)
## Teste phillips-perron
phillips_perron_test <- tseries::pp.test(ts_data)
print(phillips_perron_test)
```
